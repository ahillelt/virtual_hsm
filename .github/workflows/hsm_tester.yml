name: Virtual HSM Test and Cross-Compilation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SECRETS_TEST: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
  ACTION_KEY: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
  APP_SEC_KEY: "9876543210fedcba9876543210fedcba0123456789abcdef0123456789abcdef"

jobs:
  build-and-test:
    # Previous job remains unchanged
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    # ... rest of build-and-test job remains the same ...

  cross-compile:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [linux-x86_64, windows-x86, windows-x86_64]
        include:
          - target: linux-x86_64
            cc: gcc
            output: virtual_hsm_linux_x86_64
            defines: ""
          - target: windows-x86
            cc: i686-w64-mingw32-gcc
            output: virtual_hsm_windows_x86.exe
            defines: "-DWIN32_LEAN_AND_MEAN -D_WIN32"
          - target: windows-x86_64
            cc: x86_64-w64-mingw32-gcc
            output: virtual_hsm_windows_x86_64.exe
            defines: "-DWIN32_LEAN_AND_MEAN -D_WIN32"
    steps:
      - uses: actions/checkout@v4

      # Previous steps remain unchanged until compilation
      
      - name: Compile for ${{ matrix.target }}
        run: |
          if [[ "${{ matrix.target }}" == windows-* ]]; then
            # Set architecture-specific paths
            if [ "${{ matrix.target }}" = "windows-x86" ]; then
              MINGW_PATH="/usr/i686-w64-mingw32"
            else
              MINGW_PATH="/usr/x86_64-w64-mingw32"
            fi
            
            echo "Using MinGW path: $MINGW_PATH"
            echo "Checking library existence:"
            ls -l $MINGW_PATH/lib/libcrypto.a || true
            ls -l $MINGW_PATH/lib/libssl.a || true
            
            ${{ matrix.cc }} -o ${{ matrix.output }} virtual_hsm.c \
              ${{ matrix.defines }} \
              -I. \
              -I$MINGW_PATH/include \
              -L$MINGW_PATH/lib \
              -static -static-libgcc -static-libstdc++ \
              -Wl,-Bstatic -lcrypto -lssl -Wl,-Bdynamic -lws2_32 \
              -g -Wall -Wextra
          else
            ${{ matrix.cc }} -o ${{ matrix.output }} virtual_hsm.c -lcrypto -lssl \
              ${{ matrix.defines }} \
              -g -Wall -Wextra
          fi
          
          # Verify the binary was created
          ls -l ${{ matrix.output }} || echo "Binary not found!"

      # Simplified binary handling - remove the check-and-move logic that might be deleting files
      - name: Prepare binary for artifact
        run: |
          if [ -f "${{ matrix.output }}" ]; then
            echo "Binary ${{ matrix.output }} exists and ready for upload"
            sha256sum ${{ matrix.output }}
          else
            echo "Error: Binary ${{ matrix.output }} not found!"
            pwd
            ls -la
            exit 1
          fi

      - name: Upload compiled binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output }}
          path: ${{ matrix.output }}
          if-no-files-found: error  # This will make the step fail if no files are found

      - name: Commit and push binary
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ${{ matrix.output }}
          git commit -m "Update compiled binary for ${{ matrix.target }}" || echo "No changes to commit"
          git push || echo "No changes to push"
