name: Virtual HSM Test and Cross-Compilation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
permissions:
  contents: write
  pull-requests: write
  
env:
  SECRETS_TEST: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
  ACTION_KEY: "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
  APP_SEC_KEY: "9876543210fedcba9876543210fedcba0123456789abcdef0123456789abcdef"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    # ... rest of the build-and-test job remains the same ...

  cross-compile:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [linux-x86_64, windows-x86, windows-x86_64]
        include:
          - target: linux-x86_64
            cc: gcc
            output: virtual_hsm_linux_x86_64
            defines: ""
          - target: windows-x86
            cc: i686-w64-mingw32-gcc
            output: virtual_hsm_windows_x86.exe
            defines: "-DWIN32_LEAN_AND_MEAN -D_WIN32"
          - target: windows-x86_64
            cc: x86_64-w64-mingw32-gcc
            output: virtual_hsm_windows_x86_64.exe
            defines: "-DWIN32_LEAN_AND_MEAN -D_WIN32"
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies 
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential mingw-w64 libssl-dev

      - name: Build static OpenSSL for Windows
        if: contains(matrix.target, 'windows')
        run: |
          # Download and extract OpenSSL source
          wget https://www.openssl.org/source/openssl-3.1.4.tar.gz
          tar xzf openssl-3.1.4.tar.gz
          cd openssl-3.1.4
      
          if [ "${{ matrix.target }}" = "windows-x86" ]; then
            TARGET_DIR="$PWD/../openssl_static_x86"
            CROSS_PREFIX="i686-w64-mingw32-"
            CONFIG_TARGET="mingw"
          else
            TARGET_DIR="$PWD/../openssl_static_x64"
            CROSS_PREFIX="x86_64-w64-mingw32-"
            CONFIG_TARGET="mingw64"
          fi
      
          mkdir -p ${TARGET_DIR}/{lib,include,bin}
      
          ./Configure ${CONFIG_TARGET} no-shared \
            --prefix=${TARGET_DIR} \
            --openssldir=${TARGET_DIR}/ssl \
            --libdir=lib \
            --cross-compile-prefix=${CROSS_PREFIX} \
            -static || {
              echo "Configure failed!"
              cat config.log
              exit 1
          }
      
          make -j$(nproc) build_sw || {
            echo "Make failed!"
            tail -n 50 make.log
            exit 1
          }
      
          make install_sw || {
            echo "Install failed!"
            exit 1
          }
          
          cd ..

      - name: Compile for ${{ matrix.target }}
        run: |
          # Create directories
          mkdir -p release_package
          mkdir -p release
          
          if [[ "${{ matrix.target }}" == windows-* ]]; then
            # Windows build configuration
            if [ "${{ matrix.target }}" = "windows-x86" ]; then
              OPENSSL_DIR="$PWD/openssl_static_x86"
            else
              OPENSSL_DIR="$PWD/openssl_static_x64"
            fi
            
            echo "OpenSSL directory contents:"
            ls -R ${OPENSSL_DIR}
            
            echo "Compiling with OpenSSL from: ${OPENSSL_DIR}"
            
            # Compile directly into release_package directory
            ${{ matrix.cc }} -o "release_package/${{ matrix.output }}" virtual_hsm.c \
              ${{ matrix.defines }} \
              -I. \
              -I${OPENSSL_DIR}/include \
              -L${OPENSSL_DIR}/lib \
              -static \
              -static-libgcc \
              -static-libstdc++ \
              -Wl,-Bstatic \
              ${OPENSSL_DIR}/lib/libssl.a \
              ${OPENSSL_DIR}/lib/libcrypto.a \
              -lws2_32 \
              -lgdi32 \
              -lcrypt32 \
              -luser32 \
              -ladvapi32 \
              -lkernel32 \
              -lbcrypt \
              -g -Wall -Wextra || {
                echo "Compilation failed!"
                exit 1
              }

            # Create Windows README
            echo "Virtual HSM Windows Build" > release_package/README.txt
            echo "------------------------" >> release_package/README.txt
            echo "" >> release_package/README.txt
            echo "This package contains the Virtual HSM executable built as a static binary." >> release_package/README.txt
            echo "No additional DLLs are required to run this application." >> release_package/README.txt
            
            # Create release archive
            (cd release_package && zip "../release/${{ matrix.output }}_release.zip" ./* ) || {
              echo "Failed to create release archive"
              exit 1
            }
            
          else
            # Linux compilation
            ${{ matrix.cc }} -o "release_package/${{ matrix.output }}" virtual_hsm.c \
              -static \
              -Wl,--no-export-dynamic \
              -Wl,-Bstatic \
              -lcrypto -lssl \
              -pthread \
              -Wl,--whole-archive -lpthread -Wl,--no-whole-archive \
              -ldl -lz \
              ${{ matrix.defines }} \
              -g -Wall -Wextra || {
                echo "Compilation failed!"
                exit 1
              }
            
            # Create release archive
            (cd release_package && tar czf "../release/${{ matrix.output }}_release.tar.gz" ./* ) || {
              echo "Failed to create release archive"
              exit 1
            }
          fi
          
          # Verify files exist
          if [ ! -f "release_package/${{ matrix.output }}" ]; then
            echo "Error: Binary not found in release_package"
            exit 1
          fi
          
          if [[ "${{ matrix.target }}" == windows-* ]]; then
            if [ ! -f "release/${{ matrix.output }}_release.zip" ]; then
              echo "Error: Release archive not found"
              exit 1
            fi
          else
            if [ ! -f "release/${{ matrix.output }}_release.tar.gz" ]; then
              echo "Error: Release archive not found"
              exit 1
            fi
          fi
          
          # Debug output
          echo "Contents of release_package directory:"
          ls -la release_package/
          echo "Contents of release directory:"
          ls -la release/

      - name: Commit to main branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Fetch the latest changes
          git fetch origin main
          
          # Reset local changes in release directories to prevent conflicts
          git checkout origin/main -- release/ release_package/
          
          # Pull with rebase to handle concurrent changes more smoothly
          git pull --rebase --autostash origin main
          
          # Add binaries and release artifacts
          if [ -f "release_package/${{ matrix.output }}" ]; then
            chmod +x "release_package/${{ matrix.output }}"
            git add -f "release_package/${{ matrix.output }}" || {
              echo "Failed to add binary"
              exit 1
            }
            
            if [[ "${{ matrix.target }}" == windows-* ]]; then
              git add -f "release/${{ matrix.output }}_release.zip" || {
                echo "Failed to add release zip"
                exit 1
              }
            else
              git add -f "release/${{ matrix.output }}_release.tar.gz" || {
                echo "Failed to add release tar.gz"
                exit 1
              }
            fi
            
            git commit -m "Update binary and release artifacts for ${{ matrix.target }}" || {
              echo "No changes to commit"
              exit 0
            }
            
            git push origin main || {
              echo "Push failed due to conflict"
              exit 1
            }
          else
            echo "Error: Binary not found for commit"
            exit 1
          fi


      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output }}_all_artifacts
          path: |
            ./release_package/${{ matrix.output }}
            ./release/${{ matrix.output }}_release.*
          if-no-files-found: error
